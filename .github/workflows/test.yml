name: Generate & Publish .NET Project

on:
  workflow_dispatch:
    inputs:
      project_name:
        description: 'Name of the new .NET project (e.g., MyAwesomeApp)'
        required: true
        type: string
        default: 'Test'
      author_name:
        description: 'Author Name'
        required: true
        type: string
        default: 'GitHub Actions Bot'
      new_repo_visibility: # Added input for repo visibility
        description: 'Visibility of the new GitHub repository'
        required: true
        type: choice
        options:
          - public
          - private
        default: 'private'
      # You can add more inputs for cookiecutter variables here

jobs:
  generate-and-publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Workflow Repository
        uses: actions/checkout@v4
#        with:
          # This checks out the repo where the workflow file lives.
          # It's needed to access the workflow file itself and any other local files.
          # We'll use a different token for pushing the new repo later.
#          token: ${{ secrets.GITHUB_TOKEN }} # Use default token for this checkout

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Cookiecutter
        run: pip install cookiecutter

      - name: Define Cookiecutter Inputs
        # Create a temporary YAML file to pass inputs to Cookiecutter.
        run: |
          echo "default_context:" > cookiecutter_inputs.yml
          echo "project_name: \"${{ inputs.project_name }}\"" >> cookiecutter_inputs.yml
          
          cat cookiecutter_inputs.yml

      - name: Generate Project with Cookiecutter
        id: generate_project # Give this step an ID to reference its outputs if needed
        # Cookiecutter generates a folder named after project_slug.
        # We need to know this name for subsequent steps.
        run: |
          PROJECT_SLUG="${{ inputs.project_name }}"
          
          cookiecutter "https://github.com/abrar2204/CookieCutter" \
            --no-input \
            --config-file cookiecutter_inputs.yml \
            --output-dir "./generated_project_temp" \
            --overwrite-if-exists
          
          echo "project_slug=$PROJECT_SLUG" >> $GITHUB_OUTPUT
          echo "GENERATED_DIR=./generated_project_temp/$PROJECT_SLUG" >> $GITHUB_OUTPUT
          
      - name: Install tree command
        run: sudo apt-get update && sudo apt-get install -y tree
        
      - name: Display Generated Project Structure
        run: |
          GENERATED_PROJECT_PATH="${{ steps.generate_project.outputs.GENERATED_DIR }}"
          echo "::group::Generated Project Structure for $GENERATED_PROJECT_PATH"
          tree -L 3 -a -F --dirsfirst "$GENERATED_PROJECT_PATH"
          echo "::endgroup::"
#
#      - name: Navigate to Generated Project Directory
#        run: |
#          # Change into the actual generated project directory
#          # The 'generated_project_temp' is our temporary workspace
#          # The '$PROJECT_SLUG' is the folder created by Cookiecutter within it
#          echo "Navigating to ${{ steps.generate_project.outputs.GENERATED_DIR }}"
#          cd "${{ steps.generate_project.outputs.GENERATED_DIR }}"
#
#      - name: Initialize Git in the Generated Project
#        run: |
#          git init
#          git add .
#          git config user.name "github-actions[bot]"
#          git config user.email "github-actions[bot]@users.noreply.github.com"
#          git commit -m "Initial commit for ${{ inputs.project_name }} generated by Cookiecutter" || echo "No changes to commit initially." # Handle no initial changes
#
#      - name: Create New GitHub Repository (Using GitHub CLI)
#        env:
#          GH_TOKEN: ${{ secrets.GH_PAT_FOR_NEW_REPOS }} # Use your PAT secret for gh cli
#        run: |
#          # Install GitHub CLI (gh)
#          sudo apt-get update
#          sudo apt-get install gh -y
#          
#          # Create the repository. Adjust 'org-name' if creating in an organization.
#          # Use --public or --private based on workflow input.
#          REPO_NAME="${{ inputs.project_name | lower | replace(' ', '-') }}"
#          echo "Creating new GitHub repository: $REPO_NAME with visibility ${{ inputs.new_repo_visibility }}"
#          
#          if [[ "${{ inputs.new_repo_visibility }}" == "public" ]]; then
#            gh repo create "$REPO_NAME" --public --description "Generated .NET project: ${{ inputs.project_name }}" || true
#          else
#            gh repo create "$REPO_NAME" --private --description "Generated .NET project: ${{ inputs.project_name }}" || true
#          fi
#          
#          # Capture the full URL of the newly created repository
#          REPO_URL="https://github.com/${{ github.repository_owner }}/$REPO_NAME"
#          echo "REPO_URL=$REPO_URL" >> $GITHUB_ENV # Set as environment variable for subsequent steps
#
#      - name: Add Remote and Push to New Repository
#        run: |
#          # Add the new remote origin to the generated project's git repo
#          git remote add origin ${{ env.REPO_URL }}.git
#          
#          # Push the code to the main branch of the new repository
#          git push -u origin main
#        env:
#          # This is critical for authenticating the push to the new repo
#          # The URL is formed with 'x-access-token' and the PAT
#          # This token needs 'repo' scope in your GitHub secrets.
#          GIT_ASKPASS: "echo ${{ secrets.GH_PAT_FOR_NEW_REPOS }}"
#          GITHUB_TOKEN: ${{ secrets.GH_PAT_FOR_NEW_REPOS }} # Also helpful for push
#
#      - name: Clean Up Generated Temp Directory (Optional)
#        # This cleans up the temporary folder from the runner after the job
#        run: |
#          cd "${{ github.workspace }}" # Go back to the workflow's root
#          rm -rf generated_project_temp